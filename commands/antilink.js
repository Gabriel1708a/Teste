const { loadConfig, saveConfig } = require('../config/database');
const { detectLinks, isAdmin } = require('../utils/helpers');

/**
 * Comando !banextremo - Ativa modo extremo (bane qualquer link)
 * @param {Client} client - Cliente WhatsApp
 * @param {Message} message - Mensagem recebida
 * @param {Array} args - Argumentos do comando
 */
const banExtremo = async (client, message, args) => {
    try {
        const groupId = message.from;
        
        // Resetar outros modos anti-link
        await saveConfig(groupId, 'antilink.banLinkGp', false);
        await saveConfig(groupId, 'antilink.antiLinkGp', false);
        await saveConfig(groupId, 'antilink.enabled', false);
        
        // Ativar modo extremo
        await saveConfig(groupId, 'antilink.banExtremo', true);

        await message.reply(
            `üö´ BAN EXTREMO ATIVADO! üí•\n\n` +
            `‚ö†Ô∏è MODO MAIS RESTRITIVO:\n` +
            `‚Ä¢ Qualquer tipo de link ser√° DELETADO\n` +
            `‚Ä¢ Autor ser√° BANIDO automaticamente\n` +
            `‚Ä¢ Sem exce√ß√µes ou avisos\n\n` +
            `üõë Use com EXTREMA cautela!\n` +
            `üí° Para desativar: !banextremo off`
        );

        console.log(`üö´ Ban extremo ativado - Grupo: ${groupId}`);
        
    } catch (error) {
        console.error('Erro no comando !banextremo:', error);
        await message.reply('‚ùå Erro ao ativar ban extremo. Tente novamente.');
    }
};

/**
 * Comando !banlinkgp - Bane apenas links de grupos WhatsApp
 * @param {Client} client - Cliente WhatsApp
 * @param {Message} message - Mensagem recebida
 * @param {Array} args - Argumentos do comando
 */
const banLinkGp = async (client, message, args) => {
    try {
        const groupId = message.from;
        
        // Resetar outros modos
        await saveConfig(groupId, 'antilink.banExtremo', false);
        await saveConfig(groupId, 'antilink.antiLinkGp', false);
        await saveConfig(groupId, 'antilink.enabled', false);
        
        // Ativar ban de links de grupo
        await saveConfig(groupId, 'antilink.banLinkGp', true);

        await message.reply(
            `üî® BAN LINK GRUPO ATIVADO! ‚ö†Ô∏è\n\n` +
            `üéØ FOCADO EM GRUPOS:\n` +
            `‚Ä¢ Links de grupos WhatsApp ser√£o DELETADOS\n` +
            `‚Ä¢ Autor ser√° BANIDO automaticamente\n` +
            `‚Ä¢ Detecta: chat.whatsapp.com\n\n` +
            `‚úÖ Outros links s√£o permitidos\n` +
            `üí° Para desativar: !banlinkgp off`
        );

        console.log(`üî® Ban link grupo ativado - Grupo: ${groupId}`);
        
    } catch (error) {
        console.error('Erro no comando !banlinkgp:', error);
        await message.reply('‚ùå Erro ao ativar ban de links de grupo. Tente novamente.');
    }
};

/**
 * Comando !antilinkgp - Apenas deleta links de grupos (sem banir)
 * @param {Client} client - Cliente WhatsApp
 * @param {Message} message - Mensagem recebida
 * @param {Array} args - Argumentos do comando
 */
const antiLinkGp = async (client, message, args) => {
    try {
        const groupId = message.from;
        
        // Resetar outros modos
        await saveConfig(groupId, 'antilink.banExtremo', false);
        await saveConfig(groupId, 'antilink.banLinkGp', false);
        await saveConfig(groupId, 'antilink.enabled', false);
        
        // Ativar anti-link de grupo
        await saveConfig(groupId, 'antilink.antiLinkGp', true);

        await message.reply(
            `üõ°Ô∏è ANTI-LINK GRUPO ATIVADO! üö∑\n\n` +
            `üéØ PROTE√á√ÉO MODERADA:\n` +
            `‚Ä¢ Links de grupos WhatsApp ser√£o DELETADOS\n` +
            `‚Ä¢ Autor N√ÉO ser√° banido (apenas aviso)\n` +
            `‚Ä¢ Detecta: chat.whatsapp.com\n\n` +
            `‚úÖ Outros links s√£o permitidos\n` +
            `üí° Para desativar: !antilinkgp off`
        );

        console.log(`üõ°Ô∏è Anti-link grupo ativado - Grupo: ${groupId}`);
        
    } catch (error) {
        console.error('Erro no comando !antilinkgp:', error);
        await message.reply('‚ùå Erro ao ativar anti-link de grupo. Tente novamente.');
    }
};

/**
 * Comando !antilink - Deleta qualquer link (sem banir)
 * @param {Client} client - Cliente WhatsApp
 * @param {Message} message - Mensagem recebida
 * @param {Array} args - Argumentos do comando
 */
const antiLink = async (client, message, args) => {
    try {
        const groupId = message.from;
        
        // Resetar outros modos
        await saveConfig(groupId, 'antilink.banExtremo', false);
        await saveConfig(groupId, 'antilink.banLinkGp', false);
        await saveConfig(groupId, 'antilink.antiLinkGp', false);
        
        // Ativar anti-link geral
        await saveConfig(groupId, 'antilink.enabled', true);

        await message.reply(
            `üõ°Ô∏è ANTI-LINK ATIVADO! üö´\n\n` +
            `üéØ PROTE√á√ÉO B√ÅSICA:\n` +
            `‚Ä¢ Qualquer tipo de link ser√° DELETADO\n` +
            `‚Ä¢ Autor N√ÉO ser√° banido (apenas aviso)\n` +
            `‚Ä¢ Detecta todos os tipos de links\n\n` +
            `‚ö†Ô∏è Modo educativo - sem puni√ß√µes\n` +
            `üí° Para desativar: !antilink off`
        );

        console.log(`üõ°Ô∏è Anti-link ativado - Grupo: ${groupId}`);
        
    } catch (error) {
        console.error('Erro no comando !antilink:', error);
        await message.reply('‚ùå Erro ao ativar anti-link. Tente novamente.');
    }
};

/**
 * Comando !ban - Bane usu√°rio mencionado ou por resposta
 * @param {Client} client - Cliente WhatsApp
 * @param {Message} message - Mensagem recebida
 * @param {Array} args - Argumentos do comando
 */
const banUser = async (client, message, args) => {
    try {
        const groupId = message.from;
        let targetUserId = null;
        let targetUser = null;

        // Verificar se √© resposta a uma mensagem
        if (message.hasQuotedMsg) {
            const quotedMsg = await message.getQuotedMessage();
            targetUserId = quotedMsg.author || quotedMsg.from;
        } else if (message.mentionedIds && message.mentionedIds.length > 0) {
            // Verificar se h√° men√ß√µes na mensagem
            targetUserId = message.mentionedIds[0];
        }

        if (!targetUserId) {
            await message.reply(
                '‚ùå Usu√°rio n√£o identificado!\n\n' +
                'üìù Como usar o comando !ban:\n\n' +
                '1Ô∏è‚É£ Responda a mensagem do usu√°rio:\n' +
                '   ‚Ä¢ Responda a mensagem e digite !ban\n\n' +
                '2Ô∏è‚É£ Mencione o usu√°rio:\n' +
                '   ‚Ä¢ !ban @usuario\n\n' +
                '‚ö†Ô∏è Apenas administradores podem banir'
            );
            return;
        }

        // Verificar se o alvo n√£o √© admin
        const isTargetAdmin = await isAdmin(client, groupId, targetUserId);
        if (isTargetAdmin) {
            await message.reply(
                '‚ö†Ô∏è ERRO: N√£o √© poss√≠vel banir administrador!\n\n' +
                'üõ°Ô∏è Administradores t√™m prote√ß√£o contra banimento'
            );
            return;
        }

        // Verificar se n√£o est√° tentando banir o bot
        const botId = client.info.wid._serialized;
        if (targetUserId === botId) {
            await message.reply('ü§ñ N√£o posso banir a mim mesmo! üòÖ');
            return;
        }

        try {
            // Obter informa√ß√µes do usu√°rio
            const contact = await client.getContactById(targetUserId);
            const chat = await client.getChatById(groupId);

            // Tentar banir o usu√°rio
            await chat.removeParticipants([targetUserId]);

            await message.reply(
                `üî® USU√ÅRIO BANIDO! ‚ö†Ô∏è\n\n` +
                `üë§ Usu√°rio: @${contact.id.user}\n` +
                `‚ö° Banido por: @${message.author.replace('@c.us', '')}\n` +
                `üìÖ Data: ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}\n\n` +
                `‚úÖ Usu√°rio removido do grupo`
            );

            console.log(`üî® Usu√°rio banido - Grupo: ${groupId} - Usu√°rio: ${contact.id.user}`);
            
        } catch (banError) {
            console.error('Erro ao banir usu√°rio:', banError);
            await message.reply(
                '‚ùå ERRO AO BANIR USU√ÅRIO\n\n' +
                'üîç Poss√≠veis causas:\n' +
                '‚Ä¢ Bot n√£o √© administrador\n' +
                '‚Ä¢ Usu√°rio j√° foi removido\n' +
                '‚Ä¢ Erro de permiss√£o\n\n' +
                'üí° Verifique se o bot tem permiss√µes de admin'
            );
        }
        
    } catch (error) {
        console.error('Erro no comando !ban:', error);
        await message.reply('‚ùå Erro ao executar banimento. Tente novamente.');
    }
};

/**
 * Verifica mensagem contra sistemas anti-link ativos
 * @param {Client} client - Cliente WhatsApp
 * @param {Message} message - Mensagem recebida
 * @param {string} groupId - ID do grupo
 * @returns {Object} Resultado da verifica√ß√£o
 */
const checkMessage = async (client, message, groupId) => {
    try {
        const config = await loadConfig(groupId);
        const messageBody = message.body || '';
        
        // Se nenhum sistema anti-link est√° ativo
        if (!config.antilink.banExtremo && !config.antilink.banLinkGp && 
            !config.antilink.antiLinkGp && !config.antilink.enabled) {
            return { shouldDelete: false, shouldBan: false };
        }

        // Verificar se o autor √© admin (admins s√£o isentos)
        const isAuthorAdmin = await isAdmin(client, groupId, message.author);
        if (isAuthorAdmin) {
            return { shouldDelete: false, shouldBan: false };
        }

        // Detectar links na mensagem
        const linkInfo = detectLinks(messageBody);

        // Ban extremo - qualquer link
        if (config.antilink.banExtremo && linkInfo.hasAnyLink) {
            await notifyLinkDetected(client, groupId, message, 'BAN EXTREMO', 'qualquer link', true);
            return { shouldDelete: true, shouldBan: true };
        }

        // Ban link de grupo - apenas links do WhatsApp
        if (config.antilink.banLinkGp && linkInfo.hasWhatsAppGroupLink) {
            await notifyLinkDetected(client, groupId, message, 'BAN LINK GRUPO', 'link de grupo WhatsApp', true);
            return { shouldDelete: true, shouldBan: true };
        }

        // Anti-link de grupo - apenas deleta links do WhatsApp
        if (config.antilink.antiLinkGp && linkInfo.hasWhatsAppGroupLink) {
            await notifyLinkDetected(client, groupId, message, 'ANTI-LINK GRUPO', 'link de grupo WhatsApp', false);
            return { shouldDelete: true, shouldBan: false };
        }

        // Anti-link geral - deleta qualquer link
        if (config.antilink.enabled && linkInfo.hasAnyLink) {
            await notifyLinkDetected(client, groupId, message, 'ANTI-LINK', 'link', false);
            return { shouldDelete: true, shouldBan: false };
        }

        return { shouldDelete: false, shouldBan: false };
        
    } catch (error) {
        console.error('Erro na verifica√ß√£o anti-link:', error);
        return { shouldDelete: false, shouldBan: false };
    }
};

/**
 * Notifica sobre detec√ß√£o de link
 * @param {Client} client - Cliente WhatsApp
 * @param {string} groupId - ID do grupo
 * @param {Message} message - Mensagem original
 * @param {string} mode - Modo anti-link
 * @param {string} linkType - Tipo de link detectado
 * @param {boolean} willBan - Se o usu√°rio ser√° banido
 */
const notifyLinkDetected = async (client, groupId, message, mode, linkType, willBan) => {
    try {
        const contact = await client.getContactById(message.author);
        const action = willBan ? 'üî® BANIDO' : '‚ö†Ô∏è AVISADO';
        
        const notification = 
            `üö´ ${mode} ATIVADO! ${action}\n\n` +
            `üë§ Usu√°rio: @${contact.id.user}\n` +
            `üîó Detectado: ${linkType}\n` +
            `‚ö° A√ß√£o: Mensagem deletada${willBan ? ' + usu√°rio banido' : ''}\n` +
            `üìÖ ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`;

        await client.sendMessage(groupId, notification, {
            mentions: [message.author]
        });

        // Se deve banir, executar banimento
        if (willBan) {
            try {
                const chat = await client.getChatById(groupId);
                await chat.removeParticipants([message.author]);
                console.log(`üî® Usu√°rio banido por link - Grupo: ${groupId} - Usu√°rio: ${contact.id.user}`);
            } catch (banError) {
                console.error('Erro ao banir por link:', banError);
                await client.sendMessage(groupId, 
                    `‚ùå Erro ao banir usu√°rio. Verifique permiss√µes do bot.`);
            }
        }
        
    } catch (error) {
        console.error('Erro ao notificar detec√ß√£o de link:', error);
    }
};

/**
 * Desativa todos os sistemas anti-link
 * @param {string} groupId - ID do grupo
 */
const disableAllAntilink = async (groupId) => {
    try {
        await saveConfig(groupId, 'antilink.banExtremo', false);
        await saveConfig(groupId, 'antilink.banLinkGp', false);
        await saveConfig(groupId, 'antilink.antiLinkGp', false);
        await saveConfig(groupId, 'antilink.enabled', false);
        return true;
    } catch (error) {
        console.error('Erro ao desativar anti-link:', error);
        return false;
    }
};

module.exports = {
    banExtremo,
    banLinkGp,
    antiLinkGp,
    antiLink,
    banUser,
    checkMessage,
    notifyLinkDetected,
    disableAllAntilink
};