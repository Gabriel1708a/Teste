const { loadConfig, saveConfig, loadHorarios, loadImages, checkGroupPlan } = require('../config/database');
const { parseInterval, formatInterval, randomItem } = require('../utils/helpers');

// Armazenar intervalos ativos de hor√°rios pagantes
const activeHorariosIntervals = new Map();

/**
 * Comando !horarios - Envia sugest√£o de hor√°rios pagantes
 * @param {Client} client - Cliente WhatsApp
 * @param {Message} message - Mensagem recebida
 * @param {Array} args - Argumentos do comando
 */
const sendHorarios = async (client, message, args) => {
    try {
        const groupId = message.from;
        
        // Verificar se o grupo tem plano ativo
        const hasActivePlan = await checkGroupPlan(groupId);
        if (!hasActivePlan) {
            await message.reply(
                '‚ö†Ô∏è PLANO INATIVO! üí∞\n\n' +
                'üö´ Este grupo n√£o possui plano ativo para hor√°rios pagantes\n' +
                'üí≥ Entre em contato com o suporte para ativar\n\n' +
                'üåê Site: bottechwpp.com'
            );
            return;
        }

        // Carregar hor√°rios e mensagens
        const horariosData = await loadHorarios();
        const imagesData = await loadImages();

        if (!horariosData.horarios || horariosData.horarios.length === 0) {
            await message.reply('‚ùå Nenhum hor√°rio configurado no sistema.');
            return;
        }

        // Escolher hor√°rio aleat√≥rio
        const horarioEscolhido = randomItem(horariosData.horarios);
        
        // Escolher mensagem aleat√≥ria
        const mensagemTemplate = randomItem(horariosData.messages) || 
            "üçÄ HOR√ÅRIOS PAGANTES üí∞\n\nüïê Pr√≥ximo hor√°rio: {horario}\n\nüí∏ Aposte com responsabilidade!\nüé∞ Boa sorte a todos!";

        // Substituir vari√°vel {horario}
        const mensagemFinal = mensagemTemplate.replace(/{horario}/g, horarioEscolhido);

        // Verificar se h√° imagem dispon√≠vel
        if (imagesData.horarios && imagesData.horarios.length > 0) {
            try {
                const imagemEscolhida = randomItem(imagesData.horarios);
                // Aqui voc√™ enviaria a imagem junto com a mensagem
                // Por enquanto, apenas texto
                await client.sendMessage(groupId, mensagemFinal);
            } catch (imageError) {
                console.error('Erro ao enviar imagem:', imageError);
                await client.sendMessage(groupId, mensagemFinal);
            }
        } else {
            await client.sendMessage(groupId, mensagemFinal);
        }

        console.log(`üí∞ Hor√°rios enviados - Grupo: ${groupId} - Hor√°rio: ${horarioEscolhido}`);
        
    } catch (error) {
        console.error('Erro no comando !horarios:', error);
        await message.reply('‚ùå Erro ao enviar hor√°rios. Tente novamente.');
    }
};

/**
 * Comando !horapg - Ativa/desativa envio autom√°tico de hor√°rios
 * Sintaxe: !horapg 1 (ativar) ou !horapg 0 (desativar)
 * @param {Client} client - Cliente WhatsApp
 * @param {Message} message - Mensagem recebida
 * @param {Array} args - Argumentos do comando
 */
const toggleAutoSend = async (client, message, args) => {
    try {
        const groupId = message.from;
        const action = args[0];

        if (!action || (action !== '1' && action !== '0')) {
            await message.reply(
                '‚ùå Par√¢metro inv√°lido!\n\n' +
                'üìù Use:\n' +
                '‚Ä¢ !horapg 1 ‚Üí Ativar envio autom√°tico üçÄ\n' +
                '‚Ä¢ !horapg 0 ‚Üí Desativar envio autom√°tico ‚ùå'
            );
            return;
        }

        // Verificar plano ativo
        const hasActivePlan = await checkGroupPlan(groupId);
        if (!hasActivePlan && action === '1') {
            await message.reply(
                '‚ö†Ô∏è PLANO INATIVO! üí∞\n\n' +
                'üö´ Este grupo n√£o possui plano ativo\n' +
                'üí≥ Ative seu plano para usar hor√°rios autom√°ticos\n\n' +
                'üåê Site: bottechwpp.com'
            );
            return;
        }

        const enabled = action === '1';
        await saveConfig(groupId, 'horariosEnabled', enabled);

        if (enabled) {
            // Iniciar envio autom√°tico
            await startAutoHorarios(client, groupId);
            
            const config = await loadConfig(groupId);
            const intervalText = formatInterval(config.horariosInterval);
            
            await message.reply(
                `üçÄ HOR√ÅRIOS AUTOM√ÅTICOS ATIVADOS! üí∞\n\n` +
                `‚úÖ Envio autom√°tico LIGADO\n` +
                `‚è±Ô∏è Intervalo: ${intervalText}\n` +
                `üîÅ Funcionando continuamente\n\n` +
                `üí° Para alterar intervalo: !addhorapg tempo`
            );
        } else {
            // Parar envio autom√°tico
            stopAutoHorarios(groupId);
            
            await message.reply(
                `üîï HOR√ÅRIOS AUTOM√ÅTICOS DESATIVADOS\n\n` +
                `‚ùå Envio autom√°tico DESLIGADO\n` +
                `üìù Use !horapg 1 para reativar\n\n` +
                `üí° Voc√™ ainda pode usar !horarios manualmente`
            );
        }

        console.log(`üçÄ Hor√°rios autom√°ticos ${enabled ? 'ativado' : 'desativado'} - Grupo: ${groupId}`);
        
    } catch (error) {
        console.error('Erro no comando !horapg:', error);
        await message.reply('‚ùå Erro ao configurar hor√°rios autom√°ticos. Tente novamente.');
    }
};

/**
 * Comando !addhorapg - Define intervalo de envio autom√°tico
 * Sintaxe: !addhorapg 1h ou !addhorapg 30m
 * @param {Client} client - Cliente WhatsApp
 * @param {Message} message - Mensagem recebida
 * @param {Array} args - Argumentos do comando
 */
const setInterval = async (client, message, args) => {
    try {
        const groupId = message.from;
        const intervalStr = args[0];

        if (!intervalStr) {
            const config = await loadConfig(groupId);
            await message.reply(
                'üìù CONFIGURAR INTERVALO DE HOR√ÅRIOS\n\n' +
                'üí° Use: !addhorapg tempo\n\n' +
                '‚úÖ Formatos aceitos:\n' +
                '‚Ä¢ 30m (30 minutos)\n' +
                '‚Ä¢ 1h (1 hora)\n' +
                '‚Ä¢ 2h (2 horas)\n' +
                '‚Ä¢ 1h30m (1 hora e 30 minutos)\n\n' +
                `‚è±Ô∏è INTERVALO ATUAL: ${formatInterval(config.horariosInterval)}`
            );
            return;
        }

        // Validar intervalo
        const intervalMs = parseInterval(intervalStr);
        if (intervalMs === 0 || intervalMs < 300000) { // M√≠nimo 5 minutos
            await message.reply(
                '‚ùå Intervalo inv√°lido!\n\n' +
                '‚úÖ Formatos aceitos:\n' +
                '‚Ä¢ 30m (30 minutos)\n' +
                '‚Ä¢ 1h (1 hora)\n' +
                '‚Ä¢ 2h30m (2 horas e 30 minutos)\n\n' +
                '‚è∞ Intervalo m√≠nimo: 5 minutos'
            );
            return;
        }

        // Salvar novo intervalo
        await saveConfig(groupId, 'horariosInterval', intervalStr);

        // Verificar se est√° ativo e reiniciar se necess√°rio
        const config = await loadConfig(groupId);
        if (config.horariosEnabled) {
            stopAutoHorarios(groupId);
            await startAutoHorarios(client, groupId);
        }

        const formattedInterval = formatInterval(intervalStr);
        const status = config.horariosEnabled ? 'ATIVO üîÅ' : 'INATIVO ‚è∏Ô∏è';

        await message.reply(
            `‚úÖ INTERVALO ATUALIZADO! ‚è±Ô∏è\n\n` +
            `üïê Novo intervalo: ${formattedInterval}\n` +
            `üìä Status: ${status}\n\n` +
            `${config.horariosEnabled ? 
                'üîÑ Intervalo reiniciado com novo tempo' : 
                'üí° Use !horapg 1 para ativar envio autom√°tico'}`
        );

        console.log(`‚è±Ô∏è Intervalo de hor√°rios atualizado - Grupo: ${groupId} - Novo intervalo: ${intervalStr}`);
        
    } catch (error) {
        console.error('Erro no comando !addhorapg:', error);
        await message.reply('‚ùå Erro ao configurar intervalo. Tente novamente.');
    }
};

/**
 * Inicia envio autom√°tico de hor√°rios para um grupo
 * @param {Client} client - Cliente WhatsApp
 * @param {string} groupId - ID do grupo
 */
const startAutoHorarios = async (client, groupId) => {
    try {
        // Parar intervalo existente se houver
        stopAutoHorarios(groupId);

        const config = await loadConfig(groupId);
        const intervalMs = parseInterval(config.horariosInterval);

        if (intervalMs === 0) {
            console.warn(`Intervalo inv√°lido para grupo ${groupId}`);
            return;
        }

        // Criar novo intervalo
        const interval = setInterval(async () => {
            try {
                // Verificar se ainda est√° ativo e se tem plano
                const currentConfig = await loadConfig(groupId);
                const hasActivePlan = await checkGroupPlan(groupId);

                if (!currentConfig.horariosEnabled || !hasActivePlan) {
                    stopAutoHorarios(groupId);
                    return;
                }

                // Enviar hor√°rios
                await sendHorariosAuto(client, groupId);
                
            } catch (error) {
                console.error(`Erro no envio autom√°tico de hor√°rios ${groupId}:`, error);
            }
        }, intervalMs);

        activeHorariosIntervals.set(groupId, interval);
        console.log(`üîÅ Hor√°rios autom√°ticos iniciados - Grupo: ${groupId} - Intervalo: ${config.horariosInterval}`);
        
    } catch (error) {
        console.error('Erro ao iniciar hor√°rios autom√°ticos:', error);
    }
};

/**
 * Para envio autom√°tico de hor√°rios para um grupo
 * @param {string} groupId - ID do grupo
 */
const stopAutoHorarios = (groupId) => {
    if (activeHorariosIntervals.has(groupId)) {
        clearInterval(activeHorariosIntervals.get(groupId));
        activeHorariosIntervals.delete(groupId);
        console.log(`‚èπÔ∏è Hor√°rios autom√°ticos parados - Grupo: ${groupId}`);
    }
};

/**
 * Envia hor√°rios automaticamente (vers√£o interna)
 * @param {Client} client - Cliente WhatsApp
 * @param {string} groupId - ID do grupo
 */
const sendHorariosAuto = async (client, groupId) => {
    try {
        const horariosData = await loadHorarios();
        const imagesData = await loadImages();

        if (!horariosData.horarios || horariosData.horarios.length === 0) {
            return;
        }

        const horarioEscolhido = randomItem(horariosData.horarios);
        const mensagemTemplate = randomItem(horariosData.messages) || 
            "üçÄ HOR√ÅRIOS PAGANTES üí∞\n\nüïê Pr√≥ximo hor√°rio: {horario}\n\nüí∏ Aposte com responsabilidade!\nüé∞ Boa sorte a todos!";

        const mensagemFinal = mensagemTemplate.replace(/{horario}/g, horarioEscolhido);

        await client.sendMessage(groupId, mensagemFinal);
        console.log(`üí∞ Hor√°rios enviados automaticamente - Grupo: ${groupId} - Hor√°rio: ${horarioEscolhido}`);
        
    } catch (error) {
        console.error('Erro no envio autom√°tico de hor√°rios:', error);
    }
};

/**
 * Inicializa envio autom√°tico para todos os grupos ativos
 * @param {Client} client - Cliente WhatsApp
 */
const initializeAutoSend = async (client) => {
    try {
        // Nota: Em uma implementa√ß√£o real, voc√™ carregaria as configura√ß√µes de todos os grupos
        // Por agora, os grupos precisar√£o reativar manualmente ap√≥s rein√≠cio do bot
        console.log('üçÄ Sistema de hor√°rios autom√°ticos inicializado');
        
    } catch (error) {
        console.error('Erro ao inicializar hor√°rios autom√°ticos:', error);
    }
};

module.exports = {
    sendHorarios,
    toggleAutoSend,
    setInterval,
    initializeAutoSend,
    startAutoHorarios,
    stopAutoHorarios,
    activeHorariosIntervals
};