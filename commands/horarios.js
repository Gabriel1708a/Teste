const fs = require("fs");
const path = require("path");
const moment = require("moment-timezone");

class HorariosCommand {
    static async execute(message, client) {
        try {
            const now = moment.tz("America/Sao_Paulo");
            const currentHour = now.hours();

            const plataformas = [
                "üêØ FORTUNE TIGER", "ÔøΩ DRAGON LUCK", "ÔøΩ FORTUNE RABBIT", "üê≠ FORTUNE MOUSE",
                "ÔøΩ GANESHA GOLD", "üëô BIKINI", "ü•ä MUAY THAI", "üé™ CIRCUS", "üêÇ FORTUNE OX",
                "üí∞ DOUBLE FORTUNE", "üêâüêÖ DRAGON TIGER LUCK", "üßû GENIE'S WISHES(GENIO)",
                "üå≥üå≤ JUNGLE DELIGHT", "üê∑ PIGGY GOLD", "üëë MIDAS FORTUNE", "üåûüåõ SUN & MOON",
                "ü¶π‚Äç‚ôÇÔ∏è WILD BANDITO", "üî•üïäÔ∏è PHOENIX RISES", "üõí SUPERMARKET SPREE",
                "üö¢üë®‚Äç‚úàÔ∏è CAPTAIN BOUNTY", "üéÉ MISTER HOLLOWEEN", "üçÄüí∞ LEPRECHAUN RICHES"
            ];

            function gerarHorarioAleatorio(horaBase, minIntervalo, maxIntervalo) {
                const minutoAleatorio = Math.floor(Math.random() * (maxIntervalo - minIntervalo + 1)) + minIntervalo;
                return `${horaBase.toString().padStart(2, '0')}:${minutoAleatorio.toString().padStart(2, '0')}`;
            }

            let horariosText = `üçÄ *SUGEST√ÉO DE HOR√ÅRIOS PAGANTES DAS ${currentHour.toString().padStart(2, '0')}h* üí∞\n\n`;
            let foundRelevantHorarios = false;

            plataformas.forEach(plataforma => {
                const horariosGerados = Array.from({ length: 7 }, () => {
                    const primeiroHorario = gerarHorarioAleatorio(currentHour, 0, 59);
                    const segundoHorario = gerarHorarioAleatorio(currentHour, 0, 59);
                    return `${primeiroHorario} - ${segundoHorario}`;
                });

                if (horariosGerados.length > 0) {
                    foundRelevantHorarios = true;
                    horariosText += `*${plataforma}*\n`;
                    horariosGerados.forEach(horario => {
                        horariosText += `  ‚îî ${horario}\n`;
                    });
                    horariosText += `\n`;
                }
            });

            if (!foundRelevantHorarios) {
                horariosText += "N√£o foi poss√≠vel gerar hor√°rios pagantes para a hora atual. Tente novamente mais tarde!\n\n";
            }

            const mensagemFinal = `Dica: alterne entre os giros entre normal e turbo, se vier um Grande Ganho, PARE e espere a pr√≥xima brecha!\nÔøΩN√ÉO INDICADO PARA MENORESüîû\nLembrando a todos!\nHor√°rios de probabilidades aumentam muito sua chance de lucrar, mas lembrando que n√£o anula a chance de perda, por mais que seja baixa jogue com responsabilidade...\n\nSistema By: Aurora\nCreat: Aurora Bot Oficial`;

            horariosText += mensagemFinal;

            await message.reply(horariosText);

        } catch (error) {
            console.error("Erro no comando !horarios:", error);
            await message.reply("‚ùå Erro ao buscar hor√°rios. Tente novamente.");
        }
    }

    // M√©todos toggleAutoHorarios, setInterval e startAutoHorarios n√£o s√£o mais relevantes para a nova l√≥gica de gera√ß√£o aleat√≥ria
    // e ser√£o removidos ou adaptados se houver necessidade de agendamento autom√°tico com essa nova l√≥gica.
    static async toggleAutoHorarios(message, client, args) {
        await message.reply("Este comando foi desativado. A gera√ß√£o de hor√°rios agora √© aleat√≥ria por hora.");
    }

    static async setInterval(message, client, intervalStr) {
        await message.reply("Este comando foi desativado. A gera√ß√£o de hor√°rios agora √© aleat√≥ria por hora.");
    }

    static startAutoHorarios(groupId, client) {
        // L√≥gica de agendamento autom√°tico precisa ser revisada para a nova gera√ß√£o aleat√≥ria
        console.log("startAutoHorarios desativado para a nova l√≥gica de hor√°rios.");
    }

    static initializeAutoHorarios(client) {
        console.log("initializeAutoHorarios desativado para a nova l√≥gica de hor√°rios.");
    }
}

module.exports = HorariosCommand;